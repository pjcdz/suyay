name: Build and Deploy Suyay App

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_WEB: ${{ github.repository_owner }}/suyay_web
  REMOTE_DEPLOY_PATH: /home/deploy/suyay

jobs:
  # ----- JOB 1: Construir y Publicar la Imagen Docker -----
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Web image
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}
          tags: |
            type=sha,format=short
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ----- JOB 2: Desplegar en el Servidor de ProducciÃ³n -----
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update secrets and Deploy Stack via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "ðŸ”„ Creating new Docker Secrets with versioned names..."
            # Create new secrets with timestamp suffix to avoid naming conflicts
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            echo "${{ secrets.DB_USER }}" | docker secret create db_user_${TIMESTAMP} -
            echo "${{ secrets.DB_PASSWORD }}" | docker secret create db_password_${TIMESTAMP} -
            echo "${{ secrets.DB_NAME }}" | docker secret create db_name_${TIMESTAMP} -
            echo "âœ… New Docker Secrets created successfully."
            
            echo "ðŸ”„ Creating backup of stack configuration..."
            cp ${{ env.REMOTE_DEPLOY_PATH }}/docker-stack.yml ${{ env.REMOTE_DEPLOY_PATH }}/docker-stack.yml.bak
            
            echo "ðŸ”„ Updating secret references in docker-stack.yml..."
            # First, update all references in the secrets section at the bottom
            sed -i "/^secrets:/,$ s/db_user:/db_user_${TIMESTAMP}:/g" ${{ env.REMOTE_DEPLOY_PATH }}/docker-stack.yml
            sed -i "/^secrets:/,$ s/db_password:/db_password_${TIMESTAMP}:/g" ${{ env.REMOTE_DEPLOY_PATH }}/docker-stack.yml
            sed -i "/^secrets:/,$ s/db_name:/db_name_${TIMESTAMP}:/g" ${{ env.REMOTE_DEPLOY_PATH }}/docker-stack.yml
            
            # Then update source references within services
            sed -i "s/source: db_user/source: db_user_${TIMESTAMP}/g" ${{ env.REMOTE_DEPLOY_PATH }}/docker-stack.yml
            sed -i "s/source: db_password/source: db_password_${TIMESTAMP}/g" ${{ env.REMOTE_DEPLOY_PATH }}/docker-stack.yml
            sed -i "s/source: db_name/source: db_name_${TIMESTAMP}/g" ${{ env.REMOTE_DEPLOY_PATH }}/docker-stack.yml
            
            echo "âœ… Stack configuration updated with new secret names."
            
            echo "ðŸš€ Deploying Docker Stack using updated configuration..."
            docker stack deploy --with-registry-auth -c ${{ env.REMOTE_DEPLOY_PATH }}/docker-stack.yml suyay
            echo "ðŸŽ‰ Stack deployment command executed successfully."
            
            echo "ðŸ§¹ Cleaning up old secrets (will succeed only if they are no longer in use)..."
            # Sleep to allow services to start using new secrets before attempting cleanup
            sleep 30
            docker secret rm db_user db_password db_name || echo "Some old secrets are still in use or already removed. Continuing..."